"""
Functionality for providing info on the commands, and alias generation.
"""

import os
import settings
from commands import *


CMD_PREFIX = 'cmd_' # Functions which start with this are deemed commands


def get_command_dictionary():
    """Returns dict of all the commands"""
    commands = {}
    functions = globals()
    cutby = len(CMD_PREFIX)
    for function_name in functions:
        alias = None
        help_str = None
        if function_name.startswith(CMD_PREFIX):
            function = globals()[function_name]
            docstring_lines = [l.lstrip() for l in function.__doc__.split(os.linesep)]
            for line in docstring_lines:
                if line.startswith('alias:'):
                    alias = _extract_docstring_value(line)
                elif line.startswith('help:'):
                    help_str = _extract_docstring_value(line)
                elif alias and help_str:
                    break
            if alias and help_str:
                handle = function_name[cutby:]
                commands[handle] = {'function':function, 'alias': alias, 'help': help_str}
    return commands    


def _extract_docstring_value(line):
    return line.split(':', 1)[1].strip()


def cmd_rebuild_aliases(args):
    """
    alias: rebuild_aliases
    help: Rebuilds the alias file.
    """
    lines = _get_initial_alias_file_lines()
    commands = get_command_dictionary()
    _add_aliases_for_commands(commands, lines)
    _add_help_alias(commands, lines)
    with open(settings.ALIAS_FILE, 'w') as f:
        for line in lines:
            f.write(line + '\n')


def _get_initial_alias_file_lines():
    """
    Returns the initial lines for the alias file.
    """
    return [
        "# This file is generated by main.py in the project 'c' using the command 'rebuild_aliases'.",
        "# Changed made here will be overwritten.",
        " ",
        "SCRIPT='{}'".format(settings.MAIN_FILE),
        " ",
        "alias c.reload_aliases='source {}'".format(settings.ALIAS_FILE),
        "alias c.realias='c.rebuild_aliases && c.reload_aliases'".format(settings.ALIAS_FILE),
        ]


def _add_aliases_for_commands(commands, lines):
    """
    Build the individual command aliases.
    """
    lines.append('# Individual commands:')
    for name, command in commands.items():
        lines.extend(_expand_aliases(name, command))


def _expand_aliases(fn_name, command):
    """
    Returns list of aliases for command.
    These are generated for composit aliases e.g. 

        alias: show.[projects]

    In which case an alias is created for each project as obtained by calling list_project()
    """
    alias = command['alias']
    if '[' in alias:
        entries = []
        first_bracket = alias.find('[')
        second_bracket = alias.find(']')
        text_before = alias[0:first_bracket]
        text_after = alias[second_bracket + 1:]
        listable = alias[first_bracket + 1:second_bracket]
        enum_function = globals()['list_' + listable]
        for item in enum_function():
            sub_alias = text_before + item + text_after
            entries.append("alias c.{sub_alias}='python3 $SCRIPT {fn_name} {item} $*'".format(**locals()))
        return entries
    else:
        return ["alias c.{alias}='python3 $SCRIPT {fn_name} $*'".format(**locals())]


def _add_help_alias(commands, lines):
    """
    Build the alias lines comprising the help function
    """
    lines.extend([
        " ",
        "function c.help {",
        "  echo ' '",
        "  echo '  Commands:'",
        "  echo ' '",
        ])
    all_aliases = {
        'help': 'Prints this page.',
        'realias': 'Rebuilds and reloads aliases in current session.',
        'reload_aliases': 'Reloads aliases in current session.'
    }
    for name in commands:
        cmd = commands[name]
        all_aliases[cmd['alias']] = cmd['help']
    longest_alias = max(len(k) for k in all_aliases)
    for name in sorted(all_aliases):
        pad = (longest_alias - len(name)) * ' '
        alias = "  echo '    c.{name} {pad} {help_str}'".format(name=name, pad=pad, help_str=all_aliases[name])
        lines.append(alias)
    lines.extend(["  echo ' '", "}", " "])